teste
-------------------------------------------------------
-instalar o sass:

npm install -g sass

-criar arquivos css:
style.css

-criar arquivo sass:
style.scss

- no terminal:
(com esse comando o css pegará as informações do arquivo scss)
sass --watch style.scss:style.css

Os principais pré-processadores são Sass, Less e Stylus.
Sass: Um dos mais populares e também o mais antigo pré-processador de css, criado em 2006.
Sass significa Syntactically Awesome Style Sheets, e foi escrito em Ruby. 

---------------------------------------------------------

BEM: Block Element Modifer - é um padrão de nomenclatura para manter o projeto simples e organizado.
exemplo:
<div class="card"> (block)
  <img class="card__img"> (element)
  <button class="card__button-sucess"> (modifer - estado que o element ou o block podem ter)
  <button class="card__button-back">
</div>

---------------------------------------------------------

Nesting:
Aninha os elementos um dentro do outro evitando a repetição de nome de classes.

Parent selector (&):
seletor "&" que permite referenciar o elemento pai

ex.:
sem o Sass:
.header{}

.header__img{}

com o Sass:

.header{
  &__img{

  }
}

---------------------------------------------------------
Interpolation:

injetar valores de código/variáveis no css
exemplo:
define a variável: 
$img-width: 45%;

injeta a variável no código
width: calc(100% - #{$img-width});

---------------------------------------------------------

Placeholder selector (%):
não é incluído quando o css é compilado
todo estilo que estiver dentro do placeholder selector não será compilado no arquivo css
pode ser extendido
é possível usar em uma biblioteca que vários estilos são repetidos
como se fosse uma função de liga e desliga de alguma propriedade

exemplo:
cria uma "variável de estilo" para depois aplicá-la no estilo.

declarando o placeholder:
%no-decoration{text-decoration: none;}

aplicando:
    &__post-title{
      font-size: 14px;
      color: $purple;
      @extend %no-decoration; (para aplicar precisamos colocar antes o @extend)
    }


----------------------------------------------------------

Mixins e Include
é possível criar uma variável que armazena um bloco de estilo e depois reaproveitá-la.

exemplo:

declara o mixin com estilo que será reutilizado:
@mixin reset-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

usa o mixin em vez de digitar o código todo:
    &__posts{
      @include reset-list;
    }

declarando mixin:
@mixin flx($property, $jty-cnt) {
  display: flex;
  #{$property}: $jty-cnt;
}

usando:
@include flx(justify-content, center);

no css não aparecerá o mixin, apenas seu resultado

----------------------------------------------------------

Funções

é possível criar funções no css. Exemplo: transformar px em rem

@function calculateRem($size) {
  @return $size / 16px * 1rem;
}

@mixin fontSize($size) {
  font-size: calculateRem($size);
}

para usar:
@include fontSize(14px);

-----------------------------------------------------------
Quebrar style.scss em pequens arquivos conforme suas páginas
Esses arquivos não serão compilados, vmaos importálos para dentro do arquivo principal

para que isso aconteça é preciso nomear os arquivos pations com _ na frente.
Exemplo: 
novo arquivo:
_header.scss 

importando no arquivo principal:
@import 'header';

-----------------------------------------------------------

algumas At Rules:
@use: carrega mixins, functions e variáveis de outras folhas de estilos Sass e combina o CSS de diversas folhas de estilo juntos.

@forward: carrega uma folha de estilo Sass e torna os mixins, functions e variáveis disponíveis quando a folha de estilo é carregada pela regra do @use.

@import: estende as regras de CSS para carregar styles, mixins, functions e variáveis de outras folhas de estilo.

@mixins e @include: facilitam a reutilização de trechos de código.

@function: define funções customizadas que podem ser utilizadas em expressões.

@extend: permite que os seletores herdem estilos uns dos outros.

@at-root: coloca estilos dentro dele na raiz do documento CSS.

@error: faz com que a compilação falhe com uma mensagem de erro.

@warn: imprime um aviso sem parar totalmente a compilação.

@debug: imprime uma mensagem para fins de debugging.